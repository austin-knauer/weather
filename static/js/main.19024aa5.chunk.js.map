{"version":3,"sources":["components/Title.js","js/fetch.js","js/countries.js","components/Search.js","pics/enter.png","pics/found.png","pics/load.gif","js/colors.js","components/Results.js","App.js","reportWebVitals.js","index.js"],"names":["Title","props","id","location","code","country","query","a","Promise","all","fetch","weatherRes","locRes","ok","json","info","loc","reg","match","countries","Search","useState","setQuery","setCountry","countryCode","setCountryCode","error","setError","htmlFor","name","className","onChange","e","target","value","options","selectedIndex","map","elem","defaultValue","toUpperCase","type","placeholder","onClick","setMode","setUnits","fetchInfo","then","setTimeout","setInfo","setLocation","style","color","colors","console","log","undefined","Results","tempUnit","speedUnit","units","bigTemp","bigSpeed","images","enter","found","load","temp","desc","feelsLike","windSp","windDir","humid","useEffect","document","body","backgroundColor","mode","src","alt","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.19024aa5.chunk.js","sourcesContent":["// eslint-disable-next-line\r\nimport React, { useState } from 'react'\r\n\r\nexport default function Title(props) {\r\n    return (\r\n        <div id=\"title-section\">\r\n            <h1 id=\"title\">\r\n                {props.location}\r\n            </h1>\r\n        </div>\r\n    )\r\n}\r\n","export default async function fetchInfo(code, country, query) {\r\n\r\n    // fetch both weather and location info for searched postcode\r\n    const [weatherRes, locRes] = await Promise.all([\r\n        fetch(`http://api.weatherunlocked.com/api/current/${code}.${query}?app_id=7e69d83c&app_key=9bd589d6ac5fb61d4fb11c3685f8f0dd`),\r\n        fetch(`https://us1.locationiq.com/v1/search.php?key=pk.1f851316dfd30f756fc394349c93ae98&q=${query},${country}&format=json`)\r\n    ]);\r\n\r\n    // if weather fetch fails abort so error can be displayed\r\n    if (!weatherRes.ok) {\r\n        return null\r\n    }\r\n\r\n    const info = await weatherRes.json();\r\n    let loc = await locRes.json();\r\n\r\n    // parse city/locality name if location fetch was successful, if not, keep default title\r\n    if (!locRes.ok) {\r\n        loc = \"What's the Weather?\"\r\n    } else {\r\n        const reg = /^[^,]+/;\r\n        loc = loc[0][\"display_name\"];\r\n        loc = loc.match(reg)[0];\r\n    }\r\n\r\n    return [info, loc];\r\n};","const countries = [\r\n    {country: \"United+States\",\r\n    code: \"us\"},\r\n    {country: \"United+Kingdom\", code: \"uk\"}, \r\n    {country: \"Argentina\", code: \"ar\"},\r\n    {country: \"Austria\", code: \"at\"},\r\n    {country: \"Belgium\", code: \"be\"},\r\n    {country: \"Brazil\", code: \"br\"},\r\n    {country: \"Australia\", code: \"au\"},\r\n    {country: \"Canada\", code: \"ca\"},\r\n    {country: \"Denmark\", code: \"dk\"},\r\n    {country: \"Finland\", code: \"fi\"},\r\n    {country: \"France\", code: \"fr\"},\r\n    {country: \"Germany\", code: \"de\"},\r\n    {country: \"Ireland\", code: \"ie\"},\r\n    {country: \"Italy\", code: \"it\"},\r\n    {country: \"Netherlands\", code: \"nl\"},\r\n    {country: \"Norway\", code: \"no\"},\r\n    {country: \"Spain\", code: \"es\"},\r\n    {country: \"Sweden\", code: \"se\"}\r\n];\r\n\r\nexport default countries;","import React, { useState } from 'react';\r\nimport fetchInfo from '../js/fetch.js';\r\nimport countries from '../js/countries.js';\r\n\r\nexport default function Search(props) {\r\n\r\n    // state to keep track of current search value\r\n    const [query, setQuery] = useState(\"\");\r\n    const [country, setCountry] = useState(\"United+States\");\r\n    const [countryCode, setCountryCode] = useState(\"us\");\r\n\r\n    // state to determine whether to display an error message for invalid searches\r\n    const [error, setError] = useState(false);\r\n\r\n    const handleTextChange = (e) => {\r\n        // remove any error messages and set state to input value\r\n        setError(false);\r\n        setQuery(e.target.value);\r\n    }\r\n\r\n    const handleDropChange = (e) => {\r\n        // set state to input value\r\n        setCountryCode(e.target.value);\r\n        setCountry(e.target.options[e.target.selectedIndex].id);\r\n    }\r\n\r\n    const handleClick = () => {\r\n        \r\n        // change mode to loading and determine units that correspond with search query\r\n        props.setMode(\"load\");\r\n        countryCode !== \"us\"\r\n        ? props.setUnits(\"metric\")\r\n        : props.setUnits(\"imperial\");\r\n\r\n        // either fetch weather info for searched location or throw error and display error message\r\n        fetchInfo(countryCode, country, query).then(info => {\r\n            if (info === null) {\r\n                setError(true);\r\n                props.setMode(\"enter\");\r\n            } else {\r\n            props.setMode(\"found\");\r\n\r\n            setTimeout(() => {\r\n                props.setInfo(info[0]);\r\n                props.setLocation(info[1]);\r\n                props.setMode(\"result\");\r\n            }, 1000)\r\n            }\r\n        });\r\n\r\n        \r\n    }\r\n\r\n    return (\r\n        <div id=\"search-section\">\r\n            <label htmlFor=\"search-input\">Enter Location (Zip/Postal Code):</label>\r\n            <div id=\"search\">\r\n                <select name=\"countries\" id=\"countries\" className=\"search\" onChange={handleDropChange}>\r\n                    {countries.map((elem) => {\r\n                        return elem.code === \"us\"\r\n                            ? <option value=\"us\" key=\"us\" id=\"United+States\" defaultValue>US</option>\r\n                            : <option value={elem.code} key={elem.code} id={elem.country}>{elem.code.toUpperCase()}</option>\r\n                    })}\r\n                </select>\r\n                <input type=\"text\" placeholder=\"Zip or Postal Code\" id=\"search-input\" name=\"search\" onChange={handleTextChange}></input>\r\n                <button type=\"button\" id=\"search-submit\" name=\"search\" className=\"search\" onClick={handleClick}>Go</button>\r\n            </div>\r\n            {error && <p id=\"error-message\" style={{ color: \"red\" }}>Please Enter Valid Zip/Post Code</p>}\r\n        </div>\r\n\r\n    )\r\n}\r\n","export default __webpack_public_path__ + \"static/media/enter.f3e5df42.png\";","export default __webpack_public_path__ + \"static/media/found.f994392f.png\";","export default __webpack_public_path__ + \"static/media/load.9f848ea6.gif\";","\r\nconst colors = (code, name) => {\r\n    let color = \"#000000\";\r\n\r\n    // return a background color corresponding to the current weather description\r\n\r\n    console.log(code);\r\n\r\n    if (code === undefined || name === undefined) {\r\n        color = \"#000000\"\r\n    } else if (name === \"Clear skies\" || code === 0) {\r\n        color = \"#0496FF\";\r\n    } else if (code === -1) {\r\n        color = \"#000000\";\r\n    } else if (1 <= code <= 10 || 39 <= code <= 49) {\r\n        color = \"#817C6E\";\r\n    } else if (11 <= code <= 38) {\r\n        color = \"#7B7565\";\r\n    } else if (50 <= code <= 67 || 80 <= code <= 82) {\r\n        color = \"#00487C\";\r\n    } else if (68 <= code <= 79 || 83 <= code <= 90) {\r\n        color = \"#4BB3FD\";\r\n    } else if (91 <= code <= 94) {\r\n        color = \"#4E6E58\";\r\n    } else {\r\n        color = \"#000000\"\r\n    }\r\n    return color;\r\n}\r\n\r\nexport default colors;","import React, { useEffect } from 'react';\r\nimport enter from '../pics/enter.png';\r\nimport found from '../pics/found.png';\r\nimport load from '../pics/load.gif';\r\nimport colors from '../js/colors';\r\n\r\nexport default function Results(props) {\r\n\r\n    let tempUnit = \"f\";\r\n    let speedUnit = \"mph\";\r\n    if (props.units === \"metric\") {\r\n        tempUnit = \"c\";\r\n        speedUnit = \"kmh\";\r\n    }\r\n\r\n    const bigTemp = tempUnit.toUpperCase();\r\n    const bigSpeed = speedUnit.toUpperCase();\r\n\r\n    const images = {\"enter\": enter, \"found\": found, \"load\": load};\r\n\r\n    //unpack weather api info into variables\r\n    const {[`temp_${tempUnit}`]: temp, \"wx_desc\": desc, \"wx_code\": code, [`feelslike_${tempUnit}`]: feelsLike, [`windspd_${speedUnit}`]: windSp, \"winddir_compass\": windDir, \"humid_pct\": humid} = props.info;\r\n\r\n    useEffect(() => {\r\n        // change the body's background color depending on current weather description\r\n        document.body.style.backgroundColor = colors(code, desc);\r\n    });\r\n\r\n    return (\r\n        <div id=\"results-section\">\r\n            {props.mode !== \"result\" && <img src={images[props.mode]} alt=\"cloud logo\"></img>}\r\n            {props.mode === \"result\" && <div id=\"results\">\r\n                <h2 id=\"temp\">{temp}&#176;{bigTemp}</h2>\r\n                <h3 id=\"desc\">{desc}</h3>\r\n                <p id=\"feels-like\">Feels Like: {feelsLike}&#176;{bigTemp}</p>\r\n                <p id=\"wind\">Wind: {windSp} {bigSpeed} {windDir}</p>\r\n                <p id=\"humid\">Humidity: {humid}%</p>\r\n                </div>}\r\n        </div>\r\n    )\r\n}\r\n","import './App.css';\nimport React, { useState } from 'react';\nimport Title from './components/Title.js';\nimport Search from './components/Search.js';\nimport Results from './components/Results.js';\n\nfunction App() {\n\n  // location state changes based on searched location and updates title, units change based on location\n  const [location, setLocation] = useState(\"What's The Weather?\");\n  const [units, setUnits] = useState(\"imperial\");\n\n  // mode reflects whether the app is in search mode, is loading results, or is displaying results\n  const [mode, setMode] = useState(\"enter\");\n\n  // the weather info of the searched location is stored in the info state\n  const [info, setInfo] = useState({});\n\n  // a function to clear the app when the new search button is clicked\n  const reset = () => {\n    setInfo({});\n    setMode(\"enter\");\n    setLocation(\"What's the Weather\");\n  }\n\n  return (\n    <div id=\"app\">\n      <Title location={location}/>\n      {mode === \"result\" && <button type=\"button\" id=\"new-search\" className=\"search\" onClick={reset}>New Search</button>}\n      {mode !== \"result\" && <Search setInfo={setInfo} setMode={setMode} setUnits={setUnits} setLocation={setLocation} />}\n      <Results mode={mode} info={info} units={units} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}